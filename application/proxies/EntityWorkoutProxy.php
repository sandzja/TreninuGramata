<?php

namespace proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class EntityWorkoutProxy extends \Entity\Workout implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getLocation()
    {
        $this->__load();
        return parent::getLocation();
    }

    public function setLocation($location)
    {
        $this->__load();
        return parent::setLocation($location);
    }

    public function getDistance()
    {
        $this->__load();
        return parent::getDistance();
    }

    public function setDistance($distance)
    {
        $this->__load();
        return parent::setDistance($distance);
    }

    public function getDuration()
    {
        $this->__load();
        return parent::getDuration();
    }

    public function setDuration($duration)
    {
        $this->__load();
        return parent::setDuration($duration);
    }

    public function getStartTime()
    {
        $this->__load();
        return parent::getStartTime();
    }

    public function setStartTime(\DateTime $startTime = NULL)
    {
        $this->__load();
        return parent::setStartTime($startTime);
    }

    public function getEndTime()
    {
        $this->__load();
        return parent::getEndTime();
    }

    public function setEndTime(\DateTime $endTime = NULL)
    {
        $this->__load();
        return parent::setEndTime($endTime);
    }

    public function isShared()
    {
        $this->__load();
        return parent::isShared();
    }

    public function setShared($isShared)
    {
        $this->__load();
        return parent::setShared($isShared);
    }

    public function getRating()
    {
        $this->__load();
        return parent::getRating();
    }

    public function setRating($rating)
    {
        $this->__load();
        return parent::setRating($rating);
    }

    public function getPlayList()
    {
        $this->__load();
        return parent::getPlayList();
    }

    public function setPlayList($playList)
    {
        $this->__load();
        return parent::setPlayList($playList);
    }

    public function isSynced()
    {
        $this->__load();
        return parent::isSynced();
    }

    public function setSynced($isSynced)
    {
        $this->__load();
        return parent::setSynced($isSynced);
    }

    public function getTrainingPlanReports()
    {
        $this->__load();
        return parent::getTrainingPlanReports();
    }

    public function getTrainingPlanReport($i)
    {
        $this->__load();
        return parent::getTrainingPlanReport($i);
    }

    public function addTrainingPlanReport(\Entity\TrainingPlan\Report $trainingPlanReport)
    {
        $this->__load();
        return parent::addTrainingPlanReport($trainingPlanReport);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getFeedPost()
    {
        $this->__load();
        return parent::getFeedPost();
    }

    public function setFeedPost(\Entity\Feed\Post\Workout $feedPost)
    {
        $this->__load();
        return parent::setFeedPost($feedPost);
    }

    public function getTrainingPlans()
    {
        $this->__load();
        return parent::getTrainingPlans();
    }

    public function getTrainingPlan($i)
    {
        $this->__load();
        return parent::getTrainingPlan($i);
    }

    public function getRecord()
    {
        $this->__load();
        return parent::getRecord();
    }

    public function setRecord(\Entity\Record $record)
    {
        $this->__load();
        return parent::setRecord($record);
    }

    public function getChallenge()
    {
        $this->__load();
        return parent::getChallenge();
    }

    public function setChallenge($challenge)
    {
        $this->__load();
        return parent::setChallenge($challenge);
    }

    public function populate(array $values)
    {
        $this->__load();
        return parent::populate($values);
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'location', 'distance', 'duration', 'startTime', 'endTime', 'isShared', 'rating', 'playList', 'isSynced', 'trainingPlanReports', 'trainingPlans', 'user', 'feedPost', 'record', 'challenge');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}